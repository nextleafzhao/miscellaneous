请使用c++编写一个计算日出日落的命令行程序（可以使用libnova库），接受参数是经纬度（必要），日期（可选）。

编译命令(linux)：g++ -o suncalc suncalc.cpp -lnova -lm

#include <iostream>
#include <cstdlib>
#include <ctime>
#include <iomanip>
#include <cstring>
#include <cmath>
#include <libnova/julian_day.h>
#include <libnova/solar.h>
#include <libnova/rise_set.h>

// 检查日期是否有效
bool isValidDate(int year, int month, int day) {
    if (year < 1800 || year > 2200) return false;
    if (month < 1 || month > 12) return false;
    
    int daysInMonth[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    // 闰年处理
    if (month == 2 && ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
        if (day < 1 || day > 29) return false;
    } else {
        if (day < 1 || day > daysInMonth[month-1]) return false;
    }
    return true;
}

int main(int argc, char* argv[]) {
    // 检查参数数量
    if (argc < 3 || argc > 4) {
        std::cerr << "用法: " << argv[0] << " 经度 纬度 [日期(YYYY-MM-DD)]\n"
                  << "示例: " << argv[0] << " 116.4 39.9 2025-07-12\n"
                  << "注意: 日期应为UTC日期\n";
        return 1;
    }

    // 解析经度
    char* endptr;
    double longitude = std::strtod(argv[1], &endptr);
    if (*endptr != '\0' || longitude < -180.0 || longitude > 180.0) {
        std::cerr << "错误: 经度无效 (范围: -180.0 到 180.0)\n";
        return 1;
    }

    // 解析纬度
    double latitude = std::strtod(argv[2], &endptr);
    if (*endptr != '\0' || latitude < -90.0 || latitude > 90.0) {
        std::cerr << "错误: 纬度无效 (范围: -90.0 到 90.0)\n";
        return 1;
    }

    // 准备日期结构
    struct ln_date date;
    time_t now = time(nullptr);

    // 使用线程安全的时间函数
#if defined(_WIN32)
    struct tm tm_buf;
    gmtime_s(&tm_buf, &now);
    struct tm* tm_now = &tm_buf;
#else
    struct tm tm_buf;
    struct tm* tm_now = gmtime_r(&now, &tm_buf);
#endif

    // 如果有日期参数则解析
    if (argc == 4) {
        int year, month, day;
        if (sscanf(argv[3], "%d-%d-%d", &year, &month, &day) != 3) {
            std::cerr << "错误: 日期格式应为 YYYY-MM-DD\n";
            return 1;
        }
        
        if (!isValidDate(year, month, day)) {
            std::cerr << "错误: 无效日期\n";
            return 1;
        }
        
        date.years = year;
        date.months = month;
        date.days = day;
        date.hours = 0;
        date.minutes = 0;
        date.seconds = 0.0;
    } else {
        // 使用当前UTC日期
        date.years = tm_now->tm_year + 1900;
        date.months = tm_now->tm_mon + 1;
        date.days = tm_now->tm_mday;
        date.hours = 0;
        date.minutes = 0;
        date.seconds = 0.0;
    }

    // 计算儒略日
    double JD = ln_get_julian_day(&date);

    // 设置观察者位置
    struct ln_lnlat_posn observer;
    observer.lng = longitude;
    observer.lat = latitude;

    // 计算日出日落时间
    struct ln_rst_time rst;
    int result = ln_get_solar_rst(JD, &observer, &rst);

    // 处理结果
    if (result == 1) {
        std::cout << "极昼: 太阳终日不落\n";
    } else if (result == -1) {
        std::cout << "极夜: 太阳终日不升\n";
    } else if (result != 0) {
        std::cerr << "计算错误 (错误码: " << result << ")\n";
        return 1;
    } else {
        // 处理时间四舍五入和进位
        auto roundTime = [](double jd) -> ln_date {
            struct ln_date dt;
            // 四舍五入到秒
            double rounded_jd = std::round(jd * 86400.0) / 86400.0;
            ln_get_date(rounded_jd, &dt);
            
            // 处理秒进位
            if (dt.seconds >= 59.5) {
                dt.seconds = 0;
                dt.minutes++;
                if (dt.minutes >= 60) {
                    dt.minutes = 0;
                    dt.hours++;
                    if (dt.hours >= 24) {
                        dt.hours = 0;
                        // 注意：日期进位需要更复杂的处理
                    }
                }
            }
            return dt;
        };

        struct ln_date sunrise = roundTime(rst.rise);
        struct ln_date sunset = roundTime(rst.set);

        // 输出结果
        std::cout << "日期: " << date.years << "-" 
                  << std::setfill('0') << std::setw(2) << date.months << "-"
                  << std::setw(2) << date.days << " (UTC)\n";
        
        std::cout << "日出: " 
                  << std::setw(2) << sunrise.hours << ":"
                  << std::setw(2) << sunrise.minutes << ":"
                  << std::setw(2) << static_cast<int>(std::round(sunrise.seconds)) << " UTC\n";
        
        std::cout << "日落: "
                  << std::setw(2) << sunset.hours << ":"
                  << std::setw(2) << sunset.minutes << ":"
                  << std::setw(2) << static_cast<int>(std::round(sunset.seconds)) << " UTC\n";
    }

    return 0;
}

